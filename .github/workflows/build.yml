name: CI/CD Pipeline
'on':
  workflow_dispatch:
  push:
    branches:
      - main
      - develop
jobs:
  tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: '${{ runner.os }}-m2-${{ hashFiles(''**/pom.xml'') }}'
          restore-keys: '${{ runner.os }}-m2'
      - name: Run Tests
        run: mvn -B test
  sonar:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v1
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: '${{ runner.os }}-sonar'
          restore-keys: '${{ runner.os }}-sonar'
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: '${{ runner.os }}-m2-${{ hashFiles(''**/pom.xml'') }}'
          restore-keys: '${{ runner.os }}-m2'
      - name: Analyze with SonarCloud
        run: >-
          mvn -B verify sonar:sonar -Dsonar.projectKey=davidrezende_niver-api
          -Dsonar.organization=davidrezende
          -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONAR_TOKEN
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
          SONAR_TOKEN: '${{ secrets.SONAR_TOKEN }}'

  build:
    name: Release and Deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build with Maven
        run: mvn -B package -DskipTests --file pom.xml
      - name: Upload JAR
        uses: actions/upload-artifact@v2
        with:
          name: niver-api
          path: target/niver-api-SNAPSHOT.jar
      - name: SCP to Ocean
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "niver-api/target/niver-api-SNAPSHOT.jar"
          strip_components: 2
          target: "/home/niver/niver-api/target"
